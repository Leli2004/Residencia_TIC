{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMo4dZCpPS4F45Q1gJCCEJk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Tratamento dos dados"],"metadata":{"id":"rMplW4xipvt6"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"Nzy7G3R6o_qq"},"outputs":[],"source":["# Imports de bibliotecas\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score, confusion_matrix, mean_absolute_error\n","from sklearn.neighbors import KNeighborsRegressor\n","import json\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import pickle\n","\n","# Função pra plot do gráfico de dispersão\n","def scatterPlot(var1, var2, nome_var1, nome_var2):\n","  plt.scatter(var1, var2)\n","\n","  # Adicionando título e rótulos\n","  plt.title(f\"{nome_var1} x {nome_var2}\")\n","  plt.xlabel(nome_var1)\n","  plt.ylabel(nome_var2)\n","\n","  plt.show()\n","\n","# Função de remoção de outliers\n","def outliers(data, x):\n","\n","  # Calculando Q1 e Q3\n","  Q1 = df[x].quantile(0.25)\n","  Q3 = df[x].quantile(0.75)\n","  IQR = Q3 - Q1\n","\n","  # Definindo os limites para determinar os outliers\n","  limite_inferior = Q1 - 0.5 * IQR\n","  limite_superior = Q3 + 0.5 * IQR\n","\n","  # Filtrando os outliers\n","  df_filtrado = data[(data[x] >= limite_inferior) & (data[x] <= limite_superior)]\n","\n","  return df_filtrado\n","\n","# Lendo o arquivo JSON\n","with open('/content/dados_api.json', 'r') as file:\n","    data = json.load(file)\n","\n","# Convertendo os dados JSON em um DataFrame\n","df = pd.DataFrame(data)\n","\n","# Deleta colunas irrelevantes pra análise\n","df = df.drop(['_id','microcontroller_code'],axis=1)\n","\n","# Deleta as linhas das quais não contém o dado \"temperature_alimento\"\n","df = df.dropna(subset=['temperature_alimento'])\n","\n","# Converte a coluna \"created at\" em data e arredonda os milissegundos\n","df['created_at'] = pd.to_datetime(df['created_at']).dt.floor('S')\n","\n","# Convertendo a coluna de data e hora para timezone-naive\n","df['created_at'] = df['created_at'].dt.tz_localize(None)\n","\n","df.reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Separação do dataframe em diferentes amostras utilizando a diferença de tempo entre uma linha e outra\n","\n","# Calculando a diferença de tempo entre linhas consecutivas\n","df['diff'] = df['created_at'].diff()\n","\n","# Identificando onde a diferença excede uma hora\n","split_indices = df[df['diff'] > pd.Timedelta('1 hour')].index\n","\n","# Dividindo o DataFrame\n","dfs = []         # Lista vazia que abriga os dataframes criados\n","start_idx = 0    # Índice em que o dataframe inicia\n","\n","# Cria um novo dataframe que vai de start_idx até end_idx\n","for end_idx in split_indices:\n","    dfs.append(df.iloc[start_idx:end_idx])\n","    start_idx = end_idx\n","\n","dfs.append(df.iloc[start_idx:])  # Adiciona a última seção\n","\n","dfs_f = []\n","\n","# Faz o filtro de outliers em todos os dataframes\n","for i in range(len(dfs)):\n","    dataframe_filtrado = outliers(dfs[i], 'temperature_alimento')\n","    dfs_f.append(dataframe_filtrado)  # Adiciona o DataFrame filtrado à lista\n","\n","# Altera a informação de data para tempo em segundos\n","for i in range(len(dfs)):\n","\n","  dfs_f[i]['created_at'] = dfs_f[i]['created_at'].diff() # Calculando a diferença de tempo em segundos\n","\n","  dfs_f[i]['created_at_s'] = dfs_f[i]['created_at'].dt.total_seconds() # Converte \"created_at\" para segundos\n","\n","  dfs_f[i]['somatorio'] = dfs_f[i]['created_at_s'].cumsum() # Transforma o tempo em um somatório\n","\n","  # Remove as colunas utilizadas no cálculo da diferença de tempo\n","  dfs_f[i] = dfs_f[i].drop(['created_at','diff','created_at_s'],axis=1)\n","\n","  # Renomeia a coluna \"somatório\"\n","  dfs_f[i].rename(columns={'somatorio': 'time'}, inplace=True)\n","\n","  # Substituindo NaN por 0\n","  dfs_f[i].fillna(0, inplace=True)\n","\n","# Reseta o índice de cada dataframe\n","for i in range(len(dfs_f)):\n","  dfs_f[i].reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Exclui de cada dataframe as primeiras 10 amostras\n","for i in range(len(dfs_f)):\n","  dfs_f[i] = dfs_f[i].iloc[10:]\n","\n","# Reseta o índice de cada dataframe (de novo)\n","for i in range(len(dfs_f)):\n","  dfs_f[i].reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Exclui os dataframes desnecessários\n","dfs_f.pop(4)  # Remove o dataframe 4 (a análise não ficou boa)\n","dfs_f.pop(5)  # Remove o dataframe 5 (a análise não ficou boa)\n","\n","# Faz a média da temperatura interna máxima\n","max_temp = [] # Guarda a maior temperatura interna de cada modelo\n","\n","for i in range(len(dfs_f)):\n","  temp = (dfs_f[i]['temperature_int'].max())\n","  max_temp.append(temp)  # Adiciona o valor à lista\n","\n","# Calcula a média\n","media_temp = sum(max_temp)/len(max_temp)\n","\n","# Concatenando todos os DataFrames em um único DataFrame\n","df_uni = pd.concat(dfs_f, ignore_index=True)\n","\n","# Dados para o treino do modelo\n","dfs_treino = dfs_f[:10]                                   # Separa os primeiros 10 DataFrames para treino\n","df_treino = pd.concat(dfs_treino, ignore_index=True)      # Junta os dados em um dataframe\n","\n","# Dados para a validação (teste) do modelo\n","dfs_teste = dfs_f[10:]                                    # Separa os últimos 2 DataFrames para teste\n","df_teste = pd.concat(dfs_teste, ignore_index=True)        # Junta os dados em um dataframe\n","temp_alvo = df_teste['temperature_alimento']              # Aloca a temperatura do alimento em outro vetor para\n","                                                          # fins de comparação\n","df_teste = df_teste.drop(['temperature_alimento'],axis=1) # Tira do dataframe a coluna com a temperatura do\n","                                                          # alimento (a mesma será prevista pelo modelo)"]},{"cell_type":"code","source":["df_teste"],"metadata":{"id":"JmYXvGYbOzAi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["KNN (K-Nearest Neighbors)"],"metadata":{"id":"3vzvbZS0qnrS"}},{"cell_type":"code","source":["def KNN(df,temp_int,umid_int,temp_ext,umid_ext,tempo,temp_alim):\n","\n","  # Define quais serão as variáveis de entrada e saída, sendo X = entrada e Y = saída\n","  x = df[[temp_int, umid_int, temp_ext, umid_ext, tempo]]\n","  y = df[temp_alim]\n","\n","  # Divide os dados entre os dados de treinamento e de teste\n","  teste_porcent = 0.2 # Porcentagem da base de dados que será utilizada no teste do modelo\n","  x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=teste_porcent, random_state=0)\n","\n","  # Criando e treinando o modelo KNN\n","  k = 20  # Número de vizinhos\n","  knn = KNeighborsRegressor(n_neighbors=k)\n","  knn.fit(x_treino, y_treino)\n","\n","  # Fazendo previsões no conjunto de teste\n","  y_pred = knn.predict(x_teste)\n","\n","  return knn\n","\n","knn_modelo = KNN(df_treino, 'temperature_int','humidity_int','temperature_ext',\n","                  'humidity_ext','time','temperature_alimento')"],"metadata":{"id":"ghwOvpRlsUZl","executionInfo":{"status":"ok","timestamp":1704996825495,"user_tz":180,"elapsed":298,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}}},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":["Validação modelo"],"metadata":{"id":"p2y_Y_z01-Y5"}},{"cell_type":"code","source":["# Insere os dados de entrada para prever a temperatura do alimento\n","\n","temp_prevista = [] # Lista que abriga os valores previstos\n","\n","for index, row in df_teste.iterrows():          # Laço for itera sobre todas as linhas do dataframe\n","  entrada = np.array(row).reshape(1, -1)        # Insere como entrada a linha em questão do dataframe de teste\n","  temp_alimento = knn_modelo.predict(entrada)   # Calcula a temperatura do alimento com a entrada inserida\n","  temp_prevista.append(temp_alimento)           # Adiciona o valor à lista\n","\n","temp_prevista = [array[0] for array in temp_prevista] # Converte a lista em um vetor\n","\n","# Cria uma matriz para comparar as temperaturas previstas e reais\n","temperaturas_comp = pd.DataFrame({'Prevista': temp_prevista, 'Real': temp_alvo})\n","\n","# Calcula o erro médio absoluto entre a temperatura prevista e a temperatura real\n","mae = np.mean(np.abs(temp_alvo - temp_prevista))"],"metadata":{"id":"RT3J97an192r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"Erro Médio Absoluto (MAE):\", mae)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sy4Mrdn4pr8m","executionInfo":{"status":"ok","timestamp":1704996830714,"user_tz":180,"elapsed":256,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"83ae02c7-1aa5-4d1f-a427-a0dd8daae7d0"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stdout","text":["Erro Médio Absoluto (MAE): 1.8767226562499992\n"]}]},{"cell_type":"code","source":["temperaturas_comp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"frdHPZi02E5i","executionInfo":{"status":"ok","timestamp":1704996832749,"user_tz":180,"elapsed":280,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"466b6dd6-6c22-488f-9e1f-670c1f95f099"},"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     Prevista   Real\n","0    57.92425  62.00\n","1    57.28200  61.63\n","2    56.54625  61.31\n","3    55.72125  60.88\n","4    56.11525  60.56\n","..        ...    ...\n","123  55.19075  53.00\n","124  55.03300  52.19\n","125  54.90625  51.56\n","126  55.04350  51.06\n","127  54.93675  50.63\n","\n","[128 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6bc626dd-802f-400d-9291-82aee97ff41f\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Prevista</th>\n","      <th>Real</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>57.92425</td>\n","      <td>62.00</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>57.28200</td>\n","      <td>61.63</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>56.54625</td>\n","      <td>61.31</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>55.72125</td>\n","      <td>60.88</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>56.11525</td>\n","      <td>60.56</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>123</th>\n","      <td>55.19075</td>\n","      <td>53.00</td>\n","    </tr>\n","    <tr>\n","      <th>124</th>\n","      <td>55.03300</td>\n","      <td>52.19</td>\n","    </tr>\n","    <tr>\n","      <th>125</th>\n","      <td>54.90625</td>\n","      <td>51.56</td>\n","    </tr>\n","    <tr>\n","      <th>126</th>\n","      <td>55.04350</td>\n","      <td>51.06</td>\n","    </tr>\n","    <tr>\n","      <th>127</th>\n","      <td>54.93675</td>\n","      <td>50.63</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>128 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6bc626dd-802f-400d-9291-82aee97ff41f')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6bc626dd-802f-400d-9291-82aee97ff41f button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6bc626dd-802f-400d-9291-82aee97ff41f');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8f4a7a9b-4132-47bd-bd8d-b99993aa4214\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8f4a7a9b-4132-47bd-bd8d-b99993aa4214')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8f4a7a9b-4132-47bd-bd8d-b99993aa4214 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_1f080758-5c93-4b31-bafe-df1c492a0a52\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('temperaturas_comp')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_1f080758-5c93-4b31-bafe-df1c492a0a52 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('temperaturas_comp');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":57}]},{"cell_type":"code","source":["# Exporta em .xlsx os dataframes desejados\n","df_uni.to_excel('dados.xlsx', index=False)"],"metadata":{"id":"jHA0xTOF05cD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Salvando o modelo em um arquivo\n","with open('modelo_knn.pkl', 'wb') as file:\n","    pickle.dump(knn_modelo, file)"],"metadata":{"id":"nB-oOtRNGAmP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Matriz de correlação de dados\n","plt.figure(figsize=(10,10))\n","sns.heatmap(df_uni.corr())\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":977},"id":"7A_7_pt0v7FQ","executionInfo":{"status":"ok","timestamp":1704897123498,"user_tz":180,"elapsed":635,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"35fd7fd2-6596-4bf4-c385-ec4780de07a6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x1000 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}