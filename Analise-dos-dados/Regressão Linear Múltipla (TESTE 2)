{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPx54geLau9htvoQyMyrI4U"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Setup"],"metadata":{"id":"Qmy5Q6y_9DUg"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"CXkgVBSg9BvQ"},"outputs":[],"source":["# Imports de bibliotecas\n","import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score, confusion_matrix, mean_absolute_error\n","import json\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import pickle\n","\n","# Função pra plot do gráfico de dispersão\n","def scatterPlot(var1, var2, nome_var1, nome_var2):\n","  plt.scatter(var1, var2)\n","\n","  # Adicionando título e rótulos\n","  plt.title(f\"{nome_var1} x {nome_var2}\")\n","  plt.xlabel(nome_var1)\n","  plt.ylabel(nome_var2)\n","\n","  plt.show()\n","\n","# Função de remoção de outliers\n","def outliers(data, x):\n","\n","  # Calculando Q1 e Q3\n","  Q1 = df[x].quantile(0.25)\n","  Q3 = df[x].quantile(0.75)\n","  IQR = Q3 - Q1\n","\n","  # Definindo os limites para determinar os outliers\n","  limite_inferior = Q1 - 0.5 * IQR\n","  limite_superior = Q3 + 0.5 * IQR\n","\n","  # Filtrando os outliers\n","  df_filtrado = data[(data[x] >= limite_inferior) & (data[x] <= limite_superior)]\n","\n","  return df_filtrado\n","\n","def RegLinMultipla(df,temp_int,umid_int,temp_ext,umid_ext,temp_alim):\n","\n","  # Define quais serão as variáveis de entrada e saída, sendo X = entrada e Y = saída\n","  x = df[[temp_int, umid_int, temp_ext, umid_ext]]\n","  y = df[temp_alim]\n","\n","  # Divide os dados entre os dados de treinamento e de teste\n","  teste_porcent = 0.2 # Porcentagem da base de dados que será utilizada no teste do modelo\n","  x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=teste_porcent, random_state=0)\n","\n","  # Criar o modelo de regressão linear\n","  modelo = LinearRegression()\n","\n","  # Treinar o modelo com os dados de treino\n","  modelo.fit(x_treino, y_treino)\n","\n","  # Fazer previsões com os dados de teste\n","  y_predicao = modelo.predict(x_teste)\n","\n","  # Calcula o score do modelo\n","  r2 = r2_score(y_teste, y_predicao)\n","\n","  return modelo, r2\n","\n","  \"\"\"\n","\n","  # R² (Coeficiente de determinação):\n","  # Varia de 0 a 1, quanto maior o R², melhor o modelo em termos de explicar as variações na variável dependente\n","  r2 = r2_score(y_teste, y_predicao)\n","  print(f'R^2: {r2}')\n","\n","  # Média do erro ao quadrado:\n","  # Quanto mais próximo de zero, mais preciso o modelo\n","  mse = mean_squared_error(y_teste, y_predicao)\n","  print(f'Média do erro ao quadrado: {mse}')\n","\n","  # Média do erro ao absoluto:\n","  # Quanto mais próximo de zero, mais preciso o modelo\n","  mae = mean_absolute_error(y_teste, y_predicao)\n","  print(f'Média do erro absoluto: {mae}')\n","\n","  # Gera a função da regressão linear múltipla\n","  print(f'Intercept (b0): {modelo.intercept_}')\n","  for i, coef in enumerate(modelo.coef_):\n","    print(f'Coeficiente b{i+1} (para X{i+1}): {coef}')\n","\n","  \"\"\"\n","\n","# Lendo o arquivo JSON\n","with open('/content/dados_api.json', 'r') as file:\n","    data = json.load(file)\n","\n","# Convertendo os dados JSON em um DataFrame\n","df = pd.DataFrame(data)\n","\n","# Deleta colunas irrelevantes pra análise\n","df = df.drop(['_id','microcontroller_code'],axis=1)\n","\n","# Deleta as linhas das quais não contém o dado \"temperature_alimento\"\n","df = df.dropna(subset=['temperature_alimento'])\n","\n","# Converte a coluna \"created at\" em data e arredonda os milissegundos\n","df['created_at'] = pd.to_datetime(df['created_at']).dt.floor('S')\n","\n","# Convertendo a coluna de data e hora para timezone-naive\n","df['created_at'] = df['created_at'].dt.tz_localize(None)\n","\n","df.reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Mostra os dados em forma de tabela\n","# df.head()"]},{"cell_type":"markdown","source":["Código de regressão e tratamento de dados"],"metadata":{"id":"1kgvrSLF9l7p"}},{"cell_type":"code","source":["# Separação do dataframe em diferentes amostras utilizando a diferença de tempo entre uma linha e outra\n","\n","# Calculando a diferença de tempo entre linhas consecutivas\n","df['diff'] = df['created_at'].diff()\n","\n","# Identificando onde a diferença excede uma hora\n","split_indices = df[df['diff'] > pd.Timedelta('1 hour')].index\n","\n","# Dividindo o DataFrame\n","dfs = []         # Lista vazia que abriga os dataframes criados\n","start_idx = 0    # Índice em que o dataframe inicia\n","\n","# Cria um novo dataframe que vai de start_idx até end_idx\n","for end_idx in split_indices:\n","    dfs.append(df.iloc[start_idx:end_idx])\n","    start_idx = end_idx\n","\n","dfs.append(df.iloc[start_idx:])  # Adiciona a última seção\n","\n","dfs_f = []\n","\n","# Faz o filtro de outliers em todos os dataframes\n","for i in range(len(dfs)):\n","    dataframe_filtrado = outliers(dfs[i], 'temperature_alimento')\n","    dfs_f.append(dataframe_filtrado)  # Adiciona o DataFrame filtrado à lista\n","\n","# Altera a informação de data para tempo em segundos\n","for i in range(len(dfs)):\n","\n","  dfs_f[i]['created_at'] = dfs_f[i]['created_at'].diff() # Calculando a diferença de tempo em segundos\n","\n","  dfs_f[i]['created_at_s'] = dfs_f[i]['created_at'].dt.total_seconds() # Converte \"created_at\" para segundos\n","\n","  dfs_f[i]['somatorio'] = dfs_f[i]['created_at_s'].cumsum() # Transforma o tempo em um somatório\n","\n","  # Remove as colunas utilizadas no cálculo da diferença de tempo\n","  dfs_f[i] = dfs_f[i].drop(['created_at','diff','created_at_s'],axis=1)\n","\n","  # Renomeia a coluna \"somatório\"\n","  dfs_f[i].rename(columns={'somatorio': 'time'}, inplace=True)\n","\n","  # Substituindo NaN por 0\n","  dfs_f[i].fillna(0, inplace=True)\n","\n","# Reseta o índice de cada dataframe\n","for i in range(len(dfs_f)):\n","  dfs_f[i].reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Exclui de cada dataframe as primeiras 10 amostras\n","for i in range(len(dfs_f)):\n","  dfs_f[i] = dfs_f[i].iloc[10:]\n","\n","# Reseta o índice de cada dataframe (de novo)\n","for i in range(len(dfs_f)):\n","  dfs_f[i].reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Exclui os dataframes desnecessários\n","dfs_f.pop(4)  # Remove o dataframe 4 (a análise não ficou boa)\n","dfs_f.pop(5)  # Remove o dataframe 5 (a análise não ficou boa)\n","\n","# Faz a média da temperatura interna máxima\n","max_temp = [] # Guarda a maior temperatura interna de cada modelo\n","\n","for i in range(len(dfs_f)):\n","  temp = (dfs_f[i]['temperature_int'].max())\n","  max_temp.append(temp)  # Adiciona o valor à lista\n","\n","# Calcula a média\n","media_temp = sum(max_temp)/len(max_temp)\n","\n","# Aplica a Regressão Linear em cada dataframe e seleciona o melhor modelo\n","r_melhor = 0\n","model = []\n","\n","for i in range(len(dfs_f)):\n","\n","  m, r = RegLinMultipla(dfs_f[i],'temperature_int','humidity_int','temperature_ext',\n","                     'humidity_ext','temperature_alimento')\n","  if r > r_melhor:\n","    r_melhor = r\n","    model = m\n","\n","# Insere dados de entrada e prevê a saída\n","entrada = np.array([31.6, 100.0, 25.5, 72.7]).reshape(1, -1)\n","\n","predicao_temperatura = model.predict(entrada)\n","\n","# Salvando o modelo em um arquivo\n","with open('modelo_regressao_linear.pkl', 'wb') as file:\n","    pickle.dump(model, file)"],"metadata":{"id":"oYhCfty-9_SP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfs_f[0].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"58vVjKl_bqxT","executionInfo":{"status":"ok","timestamp":1702732843088,"user_tz":180,"elapsed":294,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"5adde91c-b864-4fe9-fa2b-63796d6011f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   temperature_int  humidity_int  temperature_ext  humidity_ext  \\\n","0             31.6         100.0             25.5          72.7   \n","1             31.7         100.0             25.5          72.7   \n","2             31.7         100.0             25.5          72.6   \n","3             31.7         100.0             25.5          72.6   \n","4             31.8         100.0             25.5          72.6   \n","\n","   temperature_alimento  time  \n","0                 65.62  50.0  \n","1                 65.56  55.0  \n","2                 65.50  60.0  \n","3                 65.37  65.0  \n","4                 65.31  70.0  "],"text/html":["\n","  <div id=\"df-ceeb8595-45eb-4294-a78e-7e3c72526653\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>temperature_int</th>\n","      <th>humidity_int</th>\n","      <th>temperature_ext</th>\n","      <th>humidity_ext</th>\n","      <th>temperature_alimento</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>31.6</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>72.7</td>\n","      <td>65.62</td>\n","      <td>50.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>31.7</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>72.7</td>\n","      <td>65.56</td>\n","      <td>55.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>31.7</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>72.6</td>\n","      <td>65.50</td>\n","      <td>60.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>31.7</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>72.6</td>\n","      <td>65.37</td>\n","      <td>65.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31.8</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>72.6</td>\n","      <td>65.31</td>\n","      <td>70.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ceeb8595-45eb-4294-a78e-7e3c72526653')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ceeb8595-45eb-4294-a78e-7e3c72526653 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ceeb8595-45eb-4294-a78e-7e3c72526653');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3bc7c66c-3ad8-4745-ac68-2869cc9a7265\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3bc7c66c-3ad8-4745-ac68-2869cc9a7265')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3bc7c66c-3ad8-4745-ac68-2869cc9a7265 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Carregando o modelo do arquivo\n","with open('modelo_regressao_linear.pkl', 'rb') as file:\n","    modelo_carregado = pickle.load(file)\n","\n","predicao = modelo_carregado.predict(entrada)\n","print(predicao)\n","\n","# Agora 'modelo_carregado' é o seu modelo de regressão linear treinado"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QuDY3mE61tH3","executionInfo":{"status":"ok","timestamp":1702314498353,"user_tz":180,"elapsed":240,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"f8747dc6-dcb5-473e-d3c4-93e13b7427af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-15.58794354]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but LinearRegression was fitted with feature names\n","  warnings.warn(\n"]}]},{"cell_type":"code","source":["#dfs_f[0].head\n","#scatterPlot(x_teste[tempo],y_predicao,'time','temp alimento prevista')\n","#plt.plot(x_teste[temp_int], y_predicao, color='red', label='Linha de Regressão')\n","#for k in range(len(dfs_f)):\n","#  scatterPlot(dfs_f[k]['time'],dfs_f[k]['temperature_int'],'temp int',f'temp alimento real teste {k}')\n","#print(media_temp)\n","#scatterPlot(df['created_at'],df['temperature_int'],'tempo','temp interna')\n","print(media_temp)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OlyWmLBueWqt","executionInfo":{"status":"ok","timestamp":1701907711470,"user_tz":180,"elapsed":5,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"3fec7b12-07a1-447e-9439-711b6e051ccc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["29.766666666666662\n"]}]},{"cell_type":"code","source":["scatterPlot(dfs_f[1]['temperature_int'],dfs_f[1]['temperature_alimento'],'temp interna','temp comida')"],"metadata":{"id":"yoVVilJziTL8","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1701907655803,"user_tz":180,"elapsed":355,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"f3f5d915-de26-4eb5-f4b3-ca933fa64ffd"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}