{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO06GqNIpgZ8eskZ0upEiwU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Imports de bibliotecas"],"metadata":{"id":"3nWVLRzfs_G2"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score, confusion_matrix, mean_absolute_error\n","import json\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"metadata":{"id":"W5BuVsF5s-QH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Gráfico de dispersão"],"metadata":{"id":"an43NXSVT49r"}},{"cell_type":"code","source":["def scatterPlot(var1, var2, nome_var1, nome_var2):\n","  plt.scatter(var1, var2)\n","\n","  # Adicionando título e rótulos\n","  plt.title(f\"{nome_var1} x {nome_var2}\")\n","  plt.xlabel(nome_var1)\n","  plt.ylabel(nome_var2)\n","\n","  plt.show()"],"metadata":{"id":"P_QjO7IET4n6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Filtragem de outliers"],"metadata":{"id":"BBe_-q-PR2OL"}},{"cell_type":"code","source":["def outliers(data, x):\n","\n","  # Calculando Q1 e Q3\n","  Q1 = df[x].quantile(0.25)\n","  Q3 = df[x].quantile(0.75)\n","  IQR = Q3 - Q1\n","\n","  # Definindo os limites para determinar os outliers\n","  limite_inferior = Q1 - 0.5 * IQR\n","  limite_superior = Q3 + 0.5 * IQR\n","\n","  # Filtrando os outliers\n","  df_filtrado = data[(df[x] >= limite_inferior) & (df[x] <= limite_superior)]\n","\n","  return df_filtrado"],"metadata":{"id":"p-twXejmY3bT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Entrada dos dados da API"],"metadata":{"id":"BmnGI2EgtBqw"}},{"cell_type":"code","source":["# Lendo o arquivo JSON\n","with open('/content/dados_api.json', 'r') as file:\n","    data = json.load(file)\n","\n","# Convertendo os dados JSON em um DataFrame\n","df = pd.DataFrame(data)\n","\n","# Deleta colunas irrelevantes pra análise\n","df = df.drop(['_id','microcontroller_code'],axis=1)\n","\n","# Deleta as linhas das quais não contém o dado \"temperature_alimento\"\n","df = df.dropna(subset=['temperature_alimento'])\n","\n","# Converte a coluna \"created at\" em data e arredonda os milissegundos\n","df['created_at'] = pd.to_datetime(df['created_at']).dt.floor('S')\n","\n","# Convertendo a coluna de data e hora para timezone-naive\n","df['created_at'] = df['created_at'].dt.tz_localize(None)\n","\n","df.reset_index(drop=True, inplace=True)  # Redefine o índice começando de 0\n","\n","# Mostra os dados em forma de tabela\n","df.head()"],"metadata":{"id":"HB8a9OwSt6R5","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1701730428689,"user_tz":180,"elapsed":423,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"4b202729-3a99-491d-a4ea-295475e1bb38"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   temperature_int  humidity_int  temperature_ext  humidity_ext  \\\n","0             26.8          74.1             26.7          72.9   \n","1             26.8          73.0             26.7          71.7   \n","2             26.8          72.8             26.7          71.5   \n","3             25.6          75.8             25.5          74.6   \n","4             25.6          75.7             25.5          75.0   \n","\n","           created_at  temperature_alimento  \n","0 2023-11-13 23:08:15                 26.69  \n","1 2023-11-13 23:08:18                 26.81  \n","2 2023-11-13 23:08:22                 26.81  \n","3 2023-11-13 23:29:43                 73.19  \n","4 2023-11-13 23:29:45                 74.19  "],"text/html":["\n","  <div id=\"df-61a8ebf6-1c4d-4963-8a79-ce182f26952c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>temperature_int</th>\n","      <th>humidity_int</th>\n","      <th>temperature_ext</th>\n","      <th>humidity_ext</th>\n","      <th>created_at</th>\n","      <th>temperature_alimento</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>26.8</td>\n","      <td>74.1</td>\n","      <td>26.7</td>\n","      <td>72.9</td>\n","      <td>2023-11-13 23:08:15</td>\n","      <td>26.69</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>26.8</td>\n","      <td>73.0</td>\n","      <td>26.7</td>\n","      <td>71.7</td>\n","      <td>2023-11-13 23:08:18</td>\n","      <td>26.81</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>26.8</td>\n","      <td>72.8</td>\n","      <td>26.7</td>\n","      <td>71.5</td>\n","      <td>2023-11-13 23:08:22</td>\n","      <td>26.81</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>25.6</td>\n","      <td>75.8</td>\n","      <td>25.5</td>\n","      <td>74.6</td>\n","      <td>2023-11-13 23:29:43</td>\n","      <td>73.19</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>25.6</td>\n","      <td>75.7</td>\n","      <td>25.5</td>\n","      <td>75.0</td>\n","      <td>2023-11-13 23:29:45</td>\n","      <td>74.19</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-61a8ebf6-1c4d-4963-8a79-ce182f26952c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-61a8ebf6-1c4d-4963-8a79-ce182f26952c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-61a8ebf6-1c4d-4963-8a79-ce182f26952c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ae2b6336-6b57-41a7-ba1b-80854579934f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ae2b6336-6b57-41a7-ba1b-80854579934f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ae2b6336-6b57-41a7-ba1b-80854579934f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["# Convertendo o dataframe em um .csv\n","df.to_csv('output.csv', index=True)"],"metadata":{"id":"4RNnUJwrkvg4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Separação do dataframe em diferentes amostras"],"metadata":{"id":"iwGhEHWnQmGZ"}},{"cell_type":"code","source":["# O objetivo é separar o dataframe em diversos dataframes utilizando a\n","# diferença de tempo entre uma aferição e outra\n","\n","# Calculando a diferença de tempo entre linhas consecutivas\n","df['diff'] = df['created_at'].diff()\n","\n","# Identificando onde a diferença excede uma hora\n","split_indices = df[df['diff'] > pd.Timedelta('1 hour')].index\n","\n","# Dividindo o DataFrame\n","dfs = []         # Lista vazia que abriga os dataframes criados\n","start_idx = 0    # Índice em que o dataframe inicia\n","\n","# Cria um novo dataframe que vai de start_idx até end_idx\n","for end_idx in split_indices:\n","    dfs.append(df.iloc[start_idx:end_idx])\n","    start_idx = end_idx\n","\n","dfs.append(df.iloc[start_idx:])  # Adiciona a última seção"],"metadata":{"id":"sOVU5sqYQpEQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfs[1].head(8)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":439},"id":"_-Dv2rRWW9TO","executionInfo":{"status":"ok","timestamp":1701730437295,"user_tz":180,"elapsed":6,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"ff2ddc0a-00fa-4c71-8f2c-a677a459b7c8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     temperature_int  humidity_int  temperature_ext  humidity_ext  \\\n","436             22.1          85.9             22.2          87.2   \n","437             22.4          87.9             22.4          86.3   \n","438             22.8          88.5             22.5          83.1   \n","439             23.2          91.5             22.5          82.7   \n","440             23.6          94.2             22.5          82.9   \n","441             24.0          95.2             22.5          82.8   \n","442             24.3          96.3             22.4          83.0   \n","443             24.6          97.1             22.4          83.3   \n","\n","             created_at  temperature_alimento            diff  \n","436 2023-11-14 23:47:28                 47.19 0 days 21:47:19  \n","437 2023-11-14 23:47:56                 61.69 0 days 00:00:28  \n","438 2023-11-14 23:48:26                 66.12 0 days 00:00:30  \n","439 2023-11-14 23:48:56                 67.31 0 days 00:00:30  \n","440 2023-11-14 23:49:26                 67.50 0 days 00:00:30  \n","441 2023-11-14 23:49:56                 67.19 0 days 00:00:30  \n","442 2023-11-14 23:50:25                 66.87 0 days 00:00:29  \n","443 2023-11-14 23:50:55                 66.50 0 days 00:00:30  "],"text/html":["\n","  <div id=\"df-57d15665-c85a-4dd8-902f-57694f53bdd4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>temperature_int</th>\n","      <th>humidity_int</th>\n","      <th>temperature_ext</th>\n","      <th>humidity_ext</th>\n","      <th>created_at</th>\n","      <th>temperature_alimento</th>\n","      <th>diff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>436</th>\n","      <td>22.1</td>\n","      <td>85.9</td>\n","      <td>22.2</td>\n","      <td>87.2</td>\n","      <td>2023-11-14 23:47:28</td>\n","      <td>47.19</td>\n","      <td>0 days 21:47:19</td>\n","    </tr>\n","    <tr>\n","      <th>437</th>\n","      <td>22.4</td>\n","      <td>87.9</td>\n","      <td>22.4</td>\n","      <td>86.3</td>\n","      <td>2023-11-14 23:47:56</td>\n","      <td>61.69</td>\n","      <td>0 days 00:00:28</td>\n","    </tr>\n","    <tr>\n","      <th>438</th>\n","      <td>22.8</td>\n","      <td>88.5</td>\n","      <td>22.5</td>\n","      <td>83.1</td>\n","      <td>2023-11-14 23:48:26</td>\n","      <td>66.12</td>\n","      <td>0 days 00:00:30</td>\n","    </tr>\n","    <tr>\n","      <th>439</th>\n","      <td>23.2</td>\n","      <td>91.5</td>\n","      <td>22.5</td>\n","      <td>82.7</td>\n","      <td>2023-11-14 23:48:56</td>\n","      <td>67.31</td>\n","      <td>0 days 00:00:30</td>\n","    </tr>\n","    <tr>\n","      <th>440</th>\n","      <td>23.6</td>\n","      <td>94.2</td>\n","      <td>22.5</td>\n","      <td>82.9</td>\n","      <td>2023-11-14 23:49:26</td>\n","      <td>67.50</td>\n","      <td>0 days 00:00:30</td>\n","    </tr>\n","    <tr>\n","      <th>441</th>\n","      <td>24.0</td>\n","      <td>95.2</td>\n","      <td>22.5</td>\n","      <td>82.8</td>\n","      <td>2023-11-14 23:49:56</td>\n","      <td>67.19</td>\n","      <td>0 days 00:00:30</td>\n","    </tr>\n","    <tr>\n","      <th>442</th>\n","      <td>24.3</td>\n","      <td>96.3</td>\n","      <td>22.4</td>\n","      <td>83.0</td>\n","      <td>2023-11-14 23:50:25</td>\n","      <td>66.87</td>\n","      <td>0 days 00:00:29</td>\n","    </tr>\n","    <tr>\n","      <th>443</th>\n","      <td>24.6</td>\n","      <td>97.1</td>\n","      <td>22.4</td>\n","      <td>83.3</td>\n","      <td>2023-11-14 23:50:55</td>\n","      <td>66.50</td>\n","      <td>0 days 00:00:30</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57d15665-c85a-4dd8-902f-57694f53bdd4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-57d15665-c85a-4dd8-902f-57694f53bdd4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-57d15665-c85a-4dd8-902f-57694f53bdd4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-61340a81-3494-4fc9-a606-13fcf2edcf07\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-61340a81-3494-4fc9-a606-13fcf2edcf07')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-61340a81-3494-4fc9-a606-13fcf2edcf07 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# Mostra o tipo de cada variável\n","dfs[1].dtypes"],"metadata":{"id":"hIyh2vNmdSr4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Filtragem dos outliers e plot dos gráficos"],"metadata":{"id":"f7lr0ux-cEfw"}},{"cell_type":"code","source":["#i = 4\n","#df_filtrado = outliers(dfs[i],'temperature_alimento')\n","#scatterPlot(dfs[i]['created_at'],dfs[i]['temperature_alimento'],'tempo','temp comida')\n","#scatterPlot(df_filtrado['created_at'],df_filtrado['temperature_alimento'],'tempo','temp comida')\n","\n","# Faz o filtro de outliers em todos os dataframes\n","for df in dfs:\n","  dfs_filtrados[df] = outliers(dfs[i],'temperature_alimento')"],"metadata":{"id":"IGKGyuDACn35"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Transforma a coluna de tempo em uma contagem cumulativa"],"metadata":{"id":"hho88T0XcHvZ"}},{"cell_type":"code","source":["dfs[i] = df_filtrado\n","\n","# Altera a informação de data para tempo em segundos\n","\n","dfs[i]['created_at'] = dfs[i]['created_at'].diff() # Calculando a diferença de tempo em segundos\n","\n","dfs[i]['created_at_s'] = dfs[i]['created_at'].dt.total_seconds() # Converte \"created_at\" para segundos\n","\n","dfs[i]['somatorio'] = dfs[i]['created_at_s'].cumsum() # Transforma o tempo em um somatório\n","\n","# Remove as colunas utilizadas no cálculo da diferença de tempo\n","dfs[i] = dfs[i].drop(['created_at','diff','created_at_s'],axis=1)\n","\n","# Renomeia a coluna \"somatório\"\n","dfs[i].rename(columns={'somatorio': 'time'}, inplace=True)\n","\n","# Substituindo NaN por 0\n","dfs[i].fillna(0, inplace=True)\n","\n","dfs[i].head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"d2E3cc8miEmG","executionInfo":{"status":"ok","timestamp":1701520978148,"user_tz":180,"elapsed":552,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"12053919-2f4e-440c-97b4-23697e980f92"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     temperature_int  humidity_int  temperature_ext  humidity_ext  \\\n","930             28.0         100.0             25.5          93.5   \n","931             28.1         100.0             25.5          93.5   \n","932             28.3         100.0             25.5          93.4   \n","933             28.4         100.0             25.5          93.3   \n","934             28.5         100.0             25.5          93.4   \n","\n","     temperature_alimento   time  \n","930                 66.56    0.0  \n","931                 66.12   30.0  \n","932                 65.69   60.0  \n","933                 65.19   90.0  \n","934                 64.75  120.0  "],"text/html":["\n","  <div id=\"df-6dfb68fb-7a43-4d53-836e-1ebe2016475a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>temperature_int</th>\n","      <th>humidity_int</th>\n","      <th>temperature_ext</th>\n","      <th>humidity_ext</th>\n","      <th>temperature_alimento</th>\n","      <th>time</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>930</th>\n","      <td>28.0</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>93.5</td>\n","      <td>66.56</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>931</th>\n","      <td>28.1</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>93.5</td>\n","      <td>66.12</td>\n","      <td>30.0</td>\n","    </tr>\n","    <tr>\n","      <th>932</th>\n","      <td>28.3</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>93.4</td>\n","      <td>65.69</td>\n","      <td>60.0</td>\n","    </tr>\n","    <tr>\n","      <th>933</th>\n","      <td>28.4</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>93.3</td>\n","      <td>65.19</td>\n","      <td>90.0</td>\n","    </tr>\n","    <tr>\n","      <th>934</th>\n","      <td>28.5</td>\n","      <td>100.0</td>\n","      <td>25.5</td>\n","      <td>93.4</td>\n","      <td>64.75</td>\n","      <td>120.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6dfb68fb-7a43-4d53-836e-1ebe2016475a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6dfb68fb-7a43-4d53-836e-1ebe2016475a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6dfb68fb-7a43-4d53-836e-1ebe2016475a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6619df43-4132-4c0b-a737-c44e438d9e44\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6619df43-4132-4c0b-a737-c44e438d9e44')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6619df43-4132-4c0b-a737-c44e438d9e44 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":64}]},{"cell_type":"code","source":["# Exporta em .xlsx os dataframes separados\n","for i, dataframe in enumerate(dfs):\n","    filename = f'analise_{i}.xlsx'\n","    dataframe.to_excel(filename, index=False)"],"metadata":{"id":"GoV-0FkLk_pT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Função pra Regressão Linear"],"metadata":{"id":"dIcOM7Xo6CeF"}},{"cell_type":"code","source":["def RegLinMultipla(df,temp_int,umid_int,temp_ext,umid_ext,tempo,temp_alim):\n","\n","  # Define quais serão as variáveis de entrada e saída, sendo X = entrada e Y = saída\n","  x = df[[temp_int, umid_int, temp_ext, umid_ext, tempo]]\n","  y = df[temp_alim]\n","\n","  # Divide os dados entre os dados de treinamento e de teste\n","  teste_porcent = 0.2 # Porcentagem da base de dados que será utilizada no teste do modelo\n","  x_treino, x_teste, y_treino, y_teste = train_test_split(x, y, test_size=teste_porcent, random_state=0)\n","\n","  # Criar o modelo de regressão linear\n","  modelo = LinearRegression()\n","\n","  # Treinar o modelo com os dados de treino\n","  modelo.fit(x_treino, y_treino)\n","\n","  # Fazer previsões com os dados de teste\n","  y_predicao = modelo.predict(x_teste)\n","\n","  # R² (Coeficiente de determinação):\n","  # Varia de 0 a 1, quanto maior o R², melhor o modelo em termos de explicar as variações na variável dependente\n","  r2 = r2_score(y_teste, y_predicao)\n","  print(f'R^2: {r2}')\n","\n","  # Média do erro ao quadrado:\n","  # Quanto mais próximo de zero, mais preciso o modelo\n","  mse = mean_squared_error(y_teste, y_predicao)\n","  print(mse)\n","\n","  # Média do erro ao absoluto:\n","  # Quanto mais próximo de zero, mais preciso o modelo\n","  mae = mean_absolute_error(y_teste, y_predicao)\n","  print(mae)\n","\n","  # Gera a função da regressão linear múltipla\n","\n","  print(f'Intercept (b0): {modelo.intercept_}')\n","  for i, coef in enumerate(modelo.coef_):\n","    print(f'Coeficiente b{i+1} (para X{i+1}): {coef}')\n","\n","  scatterPlot(x_teste[tempo],y_predicao,'time','temp alimento prevista')\n","  #plt.plot(x_teste[temp_int], y_predicao, color='red', label='Linha de Regressão')\n","  scatterPlot(x[tempo],y,'time','temp alimento real')\n","\n","y_reg = RegLinMultipla(dfs[i],'temperature_int','humidity_int','temperature_ext',\n","                     'humidity_ext','time','temperature_alimento')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"WygSnZ1fXUDx","executionInfo":{"status":"ok","timestamp":1701520981985,"user_tz":180,"elapsed":956,"user":{"displayName":"Lorenzo Romancini","userId":"04917774449564709959"}},"outputId":"87b57924-0b01-4644-a887-64060af05af9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["R^2: 0.8658782017626336\n","14.108148834994672\n","1.8754265783697375\n","Intercept (b0): 599.2325309289878\n","Coeficiente b1 (para X1): 4.425720012126677\n","Coeficiente b2 (para X2): -1.249692258624223\n","Coeficiente b3 (para X3): -13.407075656140872\n","Coeficiente b4 (para X4): -2.221561800825427\n","Coeficiente b5 (para X5): -0.0011876629943270434\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Métricas de desempenho"],"metadata":{"id":"ESpNH_e-O-Xd"}},{"cell_type":"code","source":["# Média do erro ao quadrado:\n","# Quanto mais próximo de zero, mais preciso o modelo\n","mse = mean_squared_error(y_teste, y_reg)\n","\n","# R² (Coeficiente de determinação):\n","# Varia de 0 a 1, quanto maior o R², melhor o modelo em termos de explicar as variações na variável dependente\n","r2 = r2_score(y_teste, y_reg)\n","\n","print(f'Média do erro ao quadrado: {mse}')\n","print(f'R^2: {r2}')\n","\n","# Gera a função da regressão linear múltipla\n","\n","print(f'Intercept (b0): {modelo.intercept_}')\n","for i, coef in enumerate(modelo.coef_):\n","    print(f'Coeficiente b{i+1} (para X{i+1}): {coef}')"],"metadata":{"id":"f0aqaQtTdfJT"},"execution_count":null,"outputs":[]}]}